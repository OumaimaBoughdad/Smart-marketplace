@page
@model IndexModel
@{
    ViewData["Title"] = "Smart MarketPlace - Générateur de Missions";
}

<style>
    :root {
        --primary: #2563eb;
        --primary-light: #3b82f6;
        --primary-dark: #1d4ed8;
        --secondary: #059669;
        --secondary-light: #10b981;
        --secondary-dark: #047857;
        --accent: #f59e0b;
        --accent-dark: #d97706;
        --neutral-cyan: #0891b2;
        --neutral-slate: #475569;
        --text-on-primary: #ffffff;
        --text-on-secondary: #ffffff;
        --background: #f8fafc;
        --surface: #ffffff;
        --surface-light: #f1f5f9;
        --card-bg: rgba(255, 255, 255, 0.95);
        --border-radius: 16px;
        --box-shadow: 0 8px 32px rgba(37, 99, 235, 0.15);
        --professional-glow: 0 0 20px rgba(245, 158, 11, 0.2);
        --gradient-primary: linear-gradient(135deg, #2563eb, #1e40af);
        --gradient-secondary: linear-gradient(135deg, #059669, #047857);
        --gradient-bg: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 50%, #cbd5e1 100%);
    }
    
    body {
        background: var(--gradient-bg);
        font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #334155;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }
    
    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 20% 80%, rgba(37, 99, 235, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(5, 150, 105, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 40% 40%, rgba(245, 158, 11, 0.03) 0%, transparent 50%);
        pointer-events: none;
        z-index: -1;
    }
    
    .card {
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        border: 1px solid rgba(37, 99, 235, 0.1);
        background: var(--card-bg);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(245, 158, 11, 0.05), transparent);
        transition: left 0.5s;
    }
    
    .card:hover::before {
        left: 100%;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(37, 99, 235, 0.2);
        border-color: var(--accent);
    }
    
    .card-header {
        background: var(--gradient-primary);
        color: var(--text-on-primary);
        border-top-left-radius: var(--border-radius);
        border-top-right-radius: var(--border-radius);
        border: none;
        position: relative;
        overflow: hidden;
    }
    
    .card-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: var(--gradient-secondary);
        animation: pulse 2s infinite;
    }
    
    .btn-primary {
        background: var(--gradient-primary);
        border: none;
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }
    
    .btn-primary:hover::before {
        left: 100%;
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.3);
    }
    
    .btn-outline-secondary {
        color: var(--accent);
        border: 2px solid var(--accent);
        background: transparent;
        border-radius: 12px;
        padding: 8px 16px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .btn-outline-secondary:hover {
        background: var(--accent);
        color: #ffffff;
        box-shadow: var(--professional-glow);
        transform: translateY(-2px);
    }
    
    .badge {
        background: var(--gradient-secondary) !important;
        color: var(--text-on-secondary) !important;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 1px solid var(--secondary);
        transition: all 0.3s ease;
    }
    
    .badge:hover {
        transform: scale(1.05);
        box-shadow: var(--professional-glow);
    }
    
    .form-control, .form-select {
        background: rgba(248, 250, 252, 0.9);
        border: 2px solid rgba(37, 99, 235, 0.2);
        border-radius: 12px;
        color: #334155;
        padding: 12px 16px;
        transition: all 0.3s ease;
    }
    
    .form-control:focus, .form-select:focus {
        background: rgba(255, 255, 255, 0.95);
        border-color: var(--primary);
        box-shadow: 0 0 0 0.2rem rgba(37, 99, 235, 0.15);
        color: #334155;
    }
    
    .form-control::placeholder {
        color: rgba(51, 65, 85, 0.6);
    }
    
    .form-label {
        color: var(--primary);
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 0.9rem;
    }
    
    .form-text {
        color: rgba(51, 65, 85, 0.7);
    }
    
    .display-4 {
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 800;
        text-align: center;
        position: relative;
    }
    
    .display-4::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: var(--gradient-secondary);
        border-radius: 2px;
    }
    
    .lead {
        color: rgba(51, 65, 85, 0.8);
        font-size: 1.2rem;
    }
    
    .markdown-content {
        line-height: 1.8;
        color: rgba(51, 65, 85, 0.9);
    }
    
    .markdown-content h2 {
        color: var(--primary);
        font-size: 1.5rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .markdown-content ul {
        padding-left: 2rem;
    }
    
    .markdown-content li {
        margin-bottom: 0.5rem;
    }
    
    .table {
        color: rgba(51, 65, 85, 0.9);
        background: transparent;
    }
    
    .table th {
        color: var(--primary);
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.85rem;
        border-bottom: 2px solid rgba(37, 99, 235, 0.2);
        padding: 12px 8px;
    }
    
    .table td {
        border-bottom: 1px solid rgba(51, 65, 85, 0.1);
        padding: 12px 8px;
        font-weight: 500;
    }
    
    .spinner-border {
        color: var(--accent) !important;
        width: 3rem;
        height: 3rem;
        animation: spin 1s linear infinite, professionalGlow 2s infinite alternate;
    }
    
    .alert-danger {
        background: rgba(220, 53, 69, 0.2);
        border: 2px solid rgba(220, 53, 69, 0.5);
        border-radius: var(--border-radius);
        color: #ffffff;
        backdrop-filter: blur(10px);
    }
    
    pre {
        background: rgba(248, 250, 252, 0.9) !important;
        border: 1px solid rgba(37, 99, 235, 0.2);
        border-radius: 12px;
        color: var(--primary);
        font-family: 'Fira Code', 'Courier New', monospace;
    }
    
    h1, h5, h6 {
        font-weight: 700;
        letter-spacing: 0.5px;
    }
    
    h5 {
        color: var(--primary);
        text-transform: uppercase;
    }
    
    h6 {
        color: var(--secondary);
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 0.95rem;
    }
    
    .container {
        position: relative;
        z-index: 1;
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: var(--surface-light);
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--gradient-primary);
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: var(--primary);
    }
    
    /* Loading animation enhancement */
    #loadingIndicator p {
        color: var(--primary);
        font-weight: 500;
        animation: fadeInOut 2s infinite;
    }
    
    /* Keyframes definitions */
    @keyframes pulse {
        0%, 100% { opacity: 0.6; }
        50% { opacity: 1; }
    }
    
    @keyframes professionalGlow {
        from { filter: drop-shadow(0 0 5px var(--accent)); }
        to { filter: drop-shadow(0 0 15px var(--accent)); }
    }
    
    @keyframes fadeInOut {
        0%, 100% { opacity: 0.7; }
        50% { opacity: 1; }
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12 text-center mb-4">
            <h1 class="display-4">AI Job Mission Generator</h1>
            <p class="lead">Générez des missions freelance détaillées avec un minimum d'informations</p>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Générer une Mission</h5>
                </div>
                <div class="card-body">
                    <form id="missionForm">
                        <div class="mb-3">
                            <label for="prompt" class="form-label">Entrez les détails de la mission dans n'importe quelle langue</label>
                            <textarea class="form-control" id="prompt" rows="4" placeholder="Exemple: Développeur React avec expertise en TypeScript, budget 8000, city Paris, country France" required></textarea>
                            <small class="form-text text-muted">Incluez des mots-clés comme: technologie, budget, ville, pays pour de meilleurs résultats</small>
                        </div>
                        <div class="mb-3">
                            <label for="language" class="form-label">Mode de Langue</label>
                            <select class="form-select" id="language">
                                <option value="auto" selected>Détection automatique</option>
                                <option value="french">Forcer le français</option>
                                <option value="english">Forcer l'anglais</option>
                                <option value="arabic">Forcer l'arabe</option>
                                <option value="spanish">Forcer l'espagnol</option>
                            </select>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" id="generateBtn">Générer la Mission</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mt-4">
        <div class="col-md-10">
            <div id="loadingIndicator" class="text-center d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-2">Génération de la mission en cours... Cela peut prendre un moment.</p>
            </div>
            <div id="resultContainer" class="d-none">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 id="missionTitle">Mission</h5>
                        <button class="btn btn-sm btn-outline-secondary" id="copyJsonBtn">Copier JSON</button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h6 id="descriptionLabel">Description</h6>
                                <div id="missionDescription" class="markdown-content mb-4"></div>
                                
                                <h6 id="expertiseLabel">Expertises Requises</h6>
                                <div id="requiredExpertise" class="mb-4"></div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h6 id="detailsLabel">Détails de la Mission</h6>
                                        <table class="table table-sm">
                                            <tbody>
                                                <tr>
                                                    <th id="positionLabel">Poste</th>
                                                    <td id="position"></td>
                                                </tr>
                                                <tr>
                                                    <th id="locationLabel">Lieu</th>
                                                    <td id="location"></td>
                                                </tr>
                                                <tr>
                                                    <th id="workModeLabel">Mode de Travail</th>
                                                    <td id="workMode"></td>
                                                </tr>
                                                <tr>
                                                    <th id="durationLabel">Durée</th>
                                                    <td id="duration"></td>
                                                </tr>
                                                <tr>
                                                    <th id="experienceLabel">Expérience</th>
                                                    <td id="experience"></td>
                                                </tr>
                                                <tr>
                                                    <th id="contractTypeLabel">Type de Contrat</th>
                                                    <td id="contractType"></td>
                                                </tr>
                                                <tr>
                                                    <th id="dailyRateLabel">Taux Journalier</th>
                                                    <td id="dailyRate"></td>
                                                </tr>
                                                <tr>
                                                    <th id="domainLabel">Domaine</th>
                                                    <td id="domain"></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="errorContainer" class="alert alert-danger mt-3 d-none">
                <h5>Erreur</h5>
                <p id="errorMessage"></p>
                <div id="rawErrorDetails" class="mt-2 d-none">
                    <hr>
                    <h6>Détails Techniques</h6>
                    <pre id="rawErrorContent" class="bg-light p-2" style="max-height: 200px; overflow: auto;"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const apiUrl = '@Model.ApiBaseUrl/api/JobMission/generate';
            let generatedJson = null;
            
            // Default UI labels in French
            const defaultLabels = {
                description: "Description",
                expertise: "Expertises Requises",
                details: "Détails de la Mission",
                position: "Poste",
                location: "Lieu",
                workMode: "Mode de Travail",
                duration: "Durée",
                experience: "Expérience",
                contractType: "Type de Contrat",
                dailyRate: "Taux Journalier",
                domain: "Domaine"
            };
            
            // Language-specific placeholders
            const placeholders = {
                french: "Exemple: Développeur React avec expertise en TypeScript, budget 8000, city Paris, country France",
                english: "Example: Java developer with expertise in Spring Boot, budget 10000, city London, country UK",
                arabic: "مثال: مطور جافا مع خبرة في سبرينج بوت، ميزانية 10000، المدينة الرياض، البلد السعودية",
                spanish: "Ejemplo: Desarrollador Java con experiencia en Spring Boot, presupuesto 10000, ciudad Madrid, país España"
            };
            
            // Update placeholder based on selected language
            document.getElementById('language').addEventListener('change', function() {
                const selectedLanguage = this.value;
                if (selectedLanguage !== 'auto') {
                    document.getElementById('prompt').placeholder = placeholders[selectedLanguage] || placeholders.french;
                } else {
                    document.getElementById('prompt').placeholder = placeholders.french;
                }
            });
            
            // Update UI labels based on response
            function updateUILabels(labels, detectedLanguage) {
                const uiLabels = labels || defaultLabels;
                
                document.getElementById('descriptionLabel').textContent = uiLabels.description || defaultLabels.description;
                document.getElementById('expertiseLabel').textContent = uiLabels.expertise || defaultLabels.expertise;
                document.getElementById('detailsLabel').textContent = uiLabels.details || defaultLabels.details;
                document.getElementById('positionLabel').textContent = uiLabels.position || defaultLabels.position;
                document.getElementById('locationLabel').textContent = uiLabels.location || defaultLabels.location;
                document.getElementById('workModeLabel').textContent = uiLabels.workMode || defaultLabels.workMode;
                document.getElementById('durationLabel').textContent = uiLabels.duration || defaultLabels.duration;
                document.getElementById('experienceLabel').textContent = uiLabels.experience || defaultLabels.experience;
                document.getElementById('contractTypeLabel').textContent = uiLabels.contractType || defaultLabels.contractType;
                document.getElementById('dailyRateLabel').textContent = uiLabels.dailyRate || defaultLabels.dailyRate;
                document.getElementById('domainLabel').textContent = uiLabels.domain || defaultLabels.domain;
                
                // Update language dropdown to match detected language
                if (detectedLanguage) {
                    const languageSelect = document.getElementById('language');
                    for (let i = 0; i < languageSelect.options.length; i++) {
                        if (languageSelect.options[i].value === detectedLanguage) {
                            languageSelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }
            
            // Set default French labels on page load
            updateUILabels(defaultLabels);
            
            document.getElementById('missionForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const prompt = document.getElementById('prompt').value;
                const language = document.getElementById('language').value;
                
                if (!prompt) {
                    showError('Veuillez entrer les détails de la mission');
                    return;
                }
                
                // Show loading indicator
                document.getElementById('loadingIndicator').classList.remove('d-none');
                document.getElementById('resultContainer').classList.add('d-none');
                document.getElementById('errorContainer').classList.add('d-none');
                
                try {
                    console.log('Sending request to:', apiUrl);
                    console.log('Request payload:', { prompt, language });
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: prompt,
                            language: language
                        })
                    });
                    
                    console.log('Response status:', response.status);
                    const data = await response.json();
                    console.log('Response data:', data);
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Échec de la génération de la mission');
                    }
                    
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    generatedJson = data;
                    
                    // Update UI labels from response
                    updateUILabels(data.uiLabels, data.detectedLanguage);
                    
                    // Display the mission
                    displayMission(data);
                } catch (error) {
                    console.error('Error:', error);
                    showError(error.message || 'Échec de la connexion à l\'API. Assurez-vous que les applications API et Web sont en cours d\'exécution.');
                } finally {
                    document.getElementById('loadingIndicator').classList.add('d-none');
                }
            });
            
            document.getElementById('copyJsonBtn').addEventListener('click', function() {
                if (generatedJson) {
                    navigator.clipboard.writeText(JSON.stringify(generatedJson, null, 2))
                        .then(() => {
                            const btn = this;
                            const originalText = btn.textContent;
                            btn.textContent = 'Copié!';
                            setTimeout(() => {
                                btn.textContent = originalText;
                            }, 2000);
                        })
                        .catch(err => {
                            console.error('Failed to copy: ', err);
                        });
                }
            });
            
            function displayMission(mission) {
                // Display title
                document.getElementById('missionTitle').textContent = mission.title || 'Mission';
                
                // Display description using marked.js for markdown rendering
                const descriptionEl = document.getElementById('missionDescription');
                descriptionEl.innerHTML = mission.description ? marked.parse(mission.description) : 'Aucune description fournie';
                
                // Display expertise tags
                const expertiseEl = document.getElementById('requiredExpertise');
                expertiseEl.innerHTML = '';
                if (mission.requiredExpertises && mission.requiredExpertises.length > 0) {
                    mission.requiredExpertises.forEach(skill => {
                        const badge = document.createElement('span');
                        badge.className = 'badge me-2 mb-2';
                        badge.textContent = skill;
                        expertiseEl.appendChild(badge);
                    });
                } else {
                    expertiseEl.textContent = 'Aucune expertise spécifiée';
                }
                
                // Display mission details
                document.getElementById('position').textContent = mission.position || 'Non spécifié';
                document.getElementById('location').textContent = mission.city && mission.country ? 
                    `${mission.city}, ${mission.country}` : 'Non spécifié';
                document.getElementById('workMode').textContent = mission.workMode || 'Non spécifié';
                document.getElementById('duration').textContent = mission.duration && mission.durationType ? 
                    `${mission.duration} ${mission.durationType}` : 'Non spécifié';
                document.getElementById('experience').textContent = mission.experienceYear || 'Non spécifié';
                document.getElementById('contractType').textContent = mission.contractType || 'Non spécifié';
                document.getElementById('dailyRate').textContent = mission.estimatedDailyRate ? 
                    `${mission.estimatedDailyRate} EUR` : 'Non spécifié';
                document.getElementById('domain').textContent = mission.domain || 'Non spécifié';
                
                // Show result container
                document.getElementById('resultContainer').classList.remove('d-none');
            }
            
            function showError(message, rawDetails = null) {
                const errorContainer = document.getElementById('errorContainer');
                document.getElementById('errorMessage').textContent = message;
                
                const rawErrorDetails = document.getElementById('rawErrorDetails');
                const rawErrorContent = document.getElementById('rawErrorContent');
                
                if (rawDetails) {
                    rawErrorContent.textContent = typeof rawDetails === 'object' ? 
                        JSON.stringify(rawDetails, null, 2) : rawDetails;
                    rawErrorDetails.classList.remove('d-none');
                } else {
                    rawErrorDetails.classList.add('d-none');
                }
                
                errorContainer.classList.remove('d-none');
            }
        });
    </script>
}